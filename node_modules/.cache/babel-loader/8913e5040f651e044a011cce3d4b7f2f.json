{"ast":null,"code":"var _jsxFileName = \"D:\\\\REVISE\\\\Todo-List-Using-React-main\\\\src\\\\todoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { addTaskHandler, deleteTask, fetchTodo, updateTask } from \"./api/index.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst todoContext = /*#__PURE__*/createContext();\nexport function useValue() {\n  _s();\n\n  const value = useContext(todoContext);\n  return value;\n}\n\n_s(useValue, \"ksutO2/Ix3UeCrGnhyM+QEP505Y=\");\n\nfunction TodoContext(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [Todo, setTodo] = useState([]);\n  const [isEdit, setisEdit] = useState({\n    edit: false,\n    task: {}\n  });\n  const userId = 1; // adding a functionality of competing a task\n\n  async function completed(task) {\n    const index = Todo.findIndex(elm => {\n      return elm.id === task.id;\n    });\n    setTodo(prev => {\n      prev[index].completed = true;\n      return [...prev];\n    }); // setting up notification\n\n    toast.success(\"Task Completed Succesfully\");\n  } // setting up function for updating the task\n\n\n  async function updateHandler(task, requested) {\n    if (requested) {\n      setisEdit({\n        edit: true,\n        task\n      });\n      return;\n    }\n\n    toast.info(\"In Progress\");\n    const data = await updateTask(task);\n\n    if (data.success) {\n      toast.success(\"Task updated succesfully\");\n    } else {\n      toast.error(\"Error while updating\");\n    }\n\n    setisEdit({\n      edit: false,\n      task: {}\n    });\n  } // setting up functions for deleting a particular task\n\n\n  async function deleteHandler(id) {\n    toast.info(\"In progress\");\n    const result = await deleteTask(id);\n\n    if (result.success) {\n      const todo = Todo.filter(data => {\n        return data.id !== id;\n      });\n      setTodo(todo);\n      toast.success(\"Task deleted succesfully\");\n    } else {\n      toast.error(\"Error while deleting\");\n    }\n  } //adding functionalty for adding a new todo task   \n\n\n  async function addData(title) {\n    try {\n      toast.info(\"In progress\"); // You might want to use 'info' instead of 'error' for in-progress messages.\n\n      const data = await addTaskHandler(title, userId);\n\n      if (data.success) {\n        toast.success(\"Task added successfully\");\n        setTodo([data.data, ...Todo]);\n      } else {\n        toast.error(\"Error while adding task\");\n      }\n    } catch (error) {\n      toast.error(\"Error while adding task\");\n    }\n  }\n\n  useEffect(() => {\n    async function post() {\n      const data = await fetchTodo();\n\n      if (data.success) {\n        setTodo(data.data);\n      }\n    }\n\n    post();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(todoContext.Provider, {\n    value: {\n      addData,\n      isEdit,\n      updateHandler,\n      deleteHandler,\n      completed,\n      updateHandler,\n      Todo\n    },\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(TodoContext, \"EnFdCmZEGsE2ysEN3ccohooXZO4=\");\n\n_c = TodoContext;\nexport { todoContext };\nexport default TodoContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContext\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","ToastContainer","toast","addTaskHandler","deleteTask","fetchTodo","updateTask","todoContext","useValue","value","TodoContext","children","Todo","setTodo","isEdit","setisEdit","edit","task","userId","completed","index","findIndex","elm","id","prev","success","updateHandler","requested","info","data","error","deleteHandler","result","todo","filter","addData","title","post"],"sources":["D:/REVISE/Todo-List-Using-React-main/src/todoContext.js"],"sourcesContent":["import { createContext , useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { addTaskHandler, deleteTask\r\n,fetchTodo,updateTask } from \"./api/index.js\";\r\n\r\nconst todoContext = createContext();\r\n\r\nexport function  useValue(){\r\n    const value = useContext(todoContext);\r\n    return value;\r\n}\r\n\r\n\r\nfunction TodoContext ({children}){\r\n  const [Todo, setTodo] = useState ([]);\r\n  const [isEdit, setisEdit] = useState ({\r\n    edit:false,\r\n    task:{},\r\n  });\r\n  const userId = 1;\r\n\r\n  // adding a functionality of competing a task\r\n  async function completed(task) {\r\n    const index = Todo.findIndex((elm) => {\r\n      return elm.id === task.id;\r\n    });\r\n    setTodo((prev) => {\r\n      prev[index].completed = true;\r\n      return [...prev];\r\n    });\r\n    // setting up notification\r\n     toast.success( \"Task Completed Succesfully\");\r\n  }\r\n   // setting up function for updating the task\r\n  async function updateHandler(task, requested) {\r\n    if (requested) {\r\n      setisEdit({\r\n        edit: true,\r\n        task,\r\n      });\r\n      return;\r\n    }\r\n    toast.info(\"In Progress\");\r\n    const data = await updateTask(task);\r\n    if (data.success) {\r\n      toast.success(\"Task updated succesfully\");\r\n    } else {\r\n       toast.error(\"Error while updating\");\r\n     }\r\n     setisEdit({\r\n      edit: false,\r\n      task: {},\r\n     });\r\n    } \r\n// setting up functions for deleting a particular task\r\n\r\n    async function deleteHandler(id) {\r\n    toast.info (\"In progress\");\r\n      const result = await deleteTask(id);\r\n      if (result.success) {\r\n        const todo = Todo.filter((data) => {\r\n          return data.id !== id;\r\n        });\r\n        setTodo(todo);\r\n        toast.success(\"Task deleted succesfully\")\r\n      } else {\r\n        toast.error(\"Error while deleting\");\r\n      }\r\n    }   \r\n  //adding functionalty for adding a new todo task   \r\n  async function addData(title) {\r\n    try {\r\n      toast.info(\"In progress\"); // You might want to use 'info' instead of 'error' for in-progress messages.\r\n  \r\n      const data = await addTaskHandler(title, userId);\r\n  \r\n      if (data.success) {\r\n        toast.success(\"Task added successfully\");\r\n        setTodo([data.data, ...Todo]);\r\n      } else {\r\n        toast.error(\"Error while adding task\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Error while adding task\");\r\n      \r\n    }\r\n  }\r\n    useEffect(() => {\r\n      async function post() {\r\n       \r\n        const data = await fetchTodo();\r\n        if (data.success) {\r\n         \r\n          setTodo(data.data);\r\n        } \r\n      }\r\n  \r\n      post();\r\n    }, []);\r\n  \r\n\r\n    return(\r\n        <todoContext.Provider \r\n        value={{addData,isEdit,updateHandler,\r\n          deleteHandler,completed,\r\n          updateHandler,Todo\r\n         }}>\r\n          <ToastContainer />\r\n            {children}\r\n        </todoContext.Provider>\r\n    )\r\n}\r\nexport {todoContext};\r\nexport default TodoContext;"],"mappings":"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"},"metadata":{},"sourceType":"module"}