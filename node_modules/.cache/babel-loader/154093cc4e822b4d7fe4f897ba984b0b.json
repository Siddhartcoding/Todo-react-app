{"ast":null,"code":"var _jsxFileName = \"D:\\\\REVISE\\\\soumyatodolist12.GitHub.io-main\\\\src\\\\components\\\\container\\\\TodoContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport { Store } from \"react-notifications-component\"; // importing all files\n\nimport { addTaskHandler, deleteTask, fetchTodo, updateTask } from \"../../api/index.js\";\nimport AddTask from \"../addTask/AddTask\";\nimport Spinner from \"../spinner/Spinner\";\nimport ShowTask from \"../showTask/ShowTask\";\nimport Classes from \"./TodoContainer.module.css\";\nimport \"react-notifications-component/dist/theme.css\"; // creating a functional Component as a Todo container\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoContainer = () => {\n  _s();\n\n  // setting up loading state\n  const [isLoading, setisLoading] = useState(true); // setting up todo state\n\n  const [Todo, setTodo] = useState([]); // setting up editing state\n\n  const [isEdit, setisEdit] = useState({\n    edit: false,\n    task: {}\n  }); // setting up the userId\n\n  const userId = 1; // making a notification variable for react notifications\n\n  const notifications = useMemo(() => {\n    return {\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n      dismiss: {\n        duration: 1000,\n        onScreen: true\n      }\n    };\n  }, []); // adding a functionality of competing a task\n\n  async function completed(task) {\n    const index = Todo.findIndex(elm => {\n      return elm.id === task.id;\n    });\n    setTodo(prev => {\n      prev[index].completed = true;\n      return [...prev];\n    }); // setting up notification\n\n    Store.addNotification({\n      title: \"Congratulations\",\n      message: \"Task Completed Succesfully\",\n      type: \"success\",\n      ...notifications\n    });\n  } // setting up function for updating the task\n\n\n  async function updateHandler(task, requested) {\n    if (requested) {\n      setisEdit({\n        edit: true,\n        task\n      });\n      return;\n    }\n\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"updating data\",\n      type: \"info\",\n      ...notifications\n    });\n    const data = await updateTask(task);\n\n    if (data.success) {\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task updated succesfully\",\n        type: \"success\",\n        ...notifications\n      });\n    } else {\n      Store.addNotification({\n        title: \"Oh God!\",\n        message: data.message,\n        type: \"error\",\n        ...notifications\n      });\n    }\n\n    setisEdit({\n      edit: false,\n      task: {}\n    });\n  } // setting up functions for deleting a particular task\n\n\n  async function deleteHandler(id) {\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"Deleting Data\",\n      type: \"info\",\n      ...notifications\n    });\n    const result = await deleteTask(id);\n\n    if (result.success) {\n      const todo = Todo.filter(data => {\n        return data.id !== id;\n      });\n      setTodo(todo);\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task deleted succesfully\",\n        type: \"success\",\n        ...notifications\n      });\n    } else {\n      Store.addNotification({\n        title: \"Sorry\",\n        message: result.message,\n        type: \"error\",\n        ...notifications\n      });\n    }\n  } //adding functionalty for adding a new todo task\n\n\n  async function addData(title) {\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"Adding Data\",\n      type: \"info\",\n      ...notifications\n    });\n    const data = await addTaskHandler(title, userId);\n\n    if (data.success) {\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task added succesfully\",\n        type: \"success\",\n        ...notifications\n      });\n      setTodo([data.data, ...Todo]);\n    } else {\n      Store.addNotification({\n        title: \"Sorry\",\n        message: data.message,\n        type: \"error\",\n        ...notifications\n      });\n    }\n  } // using a useEffect hook for fecthing and getting all the todo after the component renders\n\n\n  useEffect(() => {\n    async function post() {\n      Store.addNotification({\n        title: \"In Progress\",\n        message: \"fetching Data\",\n        type: \"info\",\n        ...notifications\n      });\n      const data = await fetchTodo();\n\n      if (data.success) {\n        setisLoading(false);\n        setTodo(data.data);\n      } else {\n        setisLoading(false);\n        Store.addNotification({\n          title: \"Sorry\",\n          message: data.message,\n          type: \"error\",\n          ...notifications\n        });\n      }\n    }\n\n    post();\n  }, [notifications]);\n  return (\n    /*#__PURE__*/\n    // container for todo app\n    _jsxDEV(\"div\", {\n      className: Classes.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TODO APP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n        addtask: addData,\n        isEdit: isEdit,\n        updateHandler: updateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(ShowTask, {\n        todo: Todo,\n        delete: deleteHandler,\n        completed: completed,\n        updateHandler: updateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }, this)\n  );\n}; // exporting the component by default\n\n\n_s(TodoContainer, \"m0w+cHO14RQzFJudG538EJ+vNas=\");\n\n_c = TodoContainer;\nexport default TodoContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","Store","addTaskHandler","deleteTask","fetchTodo","updateTask","AddTask","Spinner","ShowTask","Classes","TodoContainer","isLoading","setisLoading","Todo","setTodo","isEdit","setisEdit","edit","task","userId","notifications","insert","container","animationIn","animationOut","dismiss","duration","onScreen","completed","index","findIndex","elm","id","prev","addNotification","title","message","type","updateHandler","requested","data","success","deleteHandler","result","todo","filter","addData","post"],"sources":["D:/REVISE/soumyatodolist12.GitHub.io-main/src/components/container/TodoContainer.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from \"react\";\nimport { Store } from \"react-notifications-component\";\n\n// importing all files\nimport {\n  addTaskHandler,\n  deleteTask,\n  fetchTodo,\n  updateTask,\n} from \"../../api/index.js\";\nimport AddTask from \"../addTask/AddTask\";\nimport Spinner from \"../spinner/Spinner\";\nimport ShowTask from \"../showTask/ShowTask\";\nimport Classes from \"./TodoContainer.module.css\";\nimport \"react-notifications-component/dist/theme.css\";\n\n// creating a functional Component as a Todo container\nconst TodoContainer = () => {\n  // setting up loading state\n  const [isLoading, setisLoading] = useState(true);\n  // setting up todo state\n  const [Todo, setTodo] = useState([]);\n  // setting up editing state\n  const [isEdit, setisEdit] = useState({\n    edit: false,\n    task: {},\n  });\n  // setting up the userId\n  const userId = 1;\n  // making a notification variable for react notifications\n  const notifications = useMemo(() => {\n    return {\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n      dismiss: {\n        duration: 1000,\n        onScreen: true,\n      },\n    };\n  }, []);\n  // adding a functionality of competing a task\n  async function completed(task) {\n    const index = Todo.findIndex((elm) => {\n      return elm.id === task.id;\n    });\n    setTodo((prev) => {\n      prev[index].completed = true;\n      return [...prev];\n    });\n    // setting up notification\n    Store.addNotification({\n      title: \"Congratulations\",\n      message: \"Task Completed Succesfully\",\n      type: \"success\",\n      ...notifications,\n    });\n  }\n  // setting up function for updating the task\n  async function updateHandler(task, requested) {\n    if (requested) {\n      setisEdit({\n        edit: true,\n        task,\n      });\n      return;\n    }\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"updating data\",\n      type: \"info\",\n      ...notifications,\n    });\n    const data = await updateTask(task);\n    if (data.success) {\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task updated succesfully\",\n        type: \"success\",\n        ...notifications,\n      });\n    } else {\n      Store.addNotification({\n        title: \"Oh God!\",\n        message: data.message,\n        type: \"error\",\n        ...notifications,\n      });\n    }\n    setisEdit({\n      edit: false,\n      task: {},\n    });\n  }\n  // setting up functions for deleting a particular task\n  async function deleteHandler(id) {\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"Deleting Data\",\n      type: \"info\",\n      ...notifications,\n    });\n    const result = await deleteTask(id);\n    if (result.success) {\n      const todo = Todo.filter((data) => {\n        return data.id !== id;\n      });\n      setTodo(todo);\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task deleted succesfully\",\n        type: \"success\",\n        ...notifications,\n      });\n    } else {\n      Store.addNotification({\n        title: \"Sorry\",\n        message: result.message,\n        type: \"error\",\n        ...notifications,\n      });\n    }\n  }\n  //adding functionalty for adding a new todo task\n  async function addData(title) {\n    Store.addNotification({\n      title: \"In Progress\",\n      message: \"Adding Data\",\n      type: \"info\",\n      ...notifications,\n    });\n    const data = await addTaskHandler(title, userId);\n    if (data.success) {\n      Store.addNotification({\n        title: \"Hurry\",\n        message: \"Task added succesfully\",\n        type: \"success\",\n        ...notifications,\n      });\n      setTodo([data.data, ...Todo]);\n    } else {\n      Store.addNotification({\n        title: \"Sorry\",\n        message: data.message,\n        type: \"error\",\n        ...notifications,\n      });\n    }\n  }\n  // using a useEffect hook for fecthing and getting all the todo after the component renders\n  useEffect(() => {\n    async function post() {\n      Store.addNotification({\n        title: \"In Progress\",\n        message: \"fetching Data\",\n        type: \"info\",\n        ...notifications,\n      });\n      const data = await fetchTodo();\n      if (data.success) {\n        setisLoading(false);\n        setTodo(data.data);\n      } else {\n        setisLoading(false);\n        Store.addNotification({\n          title: \"Sorry\",\n          message: data.message,\n          type: \"error\",\n          ...notifications,\n        });\n      }\n    }\n\n    post();\n  }, [notifications]);\n\n  return (\n    // container for todo app\n    <div className={Classes.container}>\n      {/* heading */}\n      <h1>TODO APP</h1>\n      {/* component for adding a task */}\n      <AddTask\n        addtask={addData}\n        isEdit={isEdit}\n        updateHandler={updateHandler}\n      />\n      {/* component for rendering the tasks */}\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <ShowTask\n          todo={Todo}\n          delete={deleteHandler}\n          completed={completed}\n          updateHandler={updateHandler}\n        />\n      )}\n    </div>\n  );\n};\n\n// exporting the component by default\nexport default TodoContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}